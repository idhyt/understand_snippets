# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;
use constant OPT1 => "Case/Default clauses with return";
use constant OPT1RETURN=> "Return allowed";
use constant OPT1NORETURN=> "Return not allowed";

# This is the error that will be returned when a violation is found
use constant ERR1 => 'Unconditional throw or break statement does not terminate non-empty switch-clause in %1.';
use constant ERR2 => 'Preprocessor used in the construction of this switch clause, switch statement cannot be tested!';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text( ERR1 );
  $check->add_tr_text( ERR2 );
}

sub checkID { return "MISRA12_16.3";}


# This is the short error the Understand will use
sub name { return "16.3 An unconditional break statement shall terminate every switch-clause";}

# This is the full description of the rule being tested
sub description { return "16.3 (Required) An unconditional break statement shall terminate every non-empty switch-clause.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p>
<b>Rationale</b><br>
If a developer fails to end a <i>switch-clause</i> with a <i>break</i> statement, then control flow “falls” into the
following <i>switch-clause</i> or, if there is no such clause, off the end and into the statement following
the <i>switch</i> statement. Whilst falling into a following <i>switch-clause</i> is sometimes intentional, it is often
an error. An unterminated <i>switch-clause</i> occurring at the end of a <i>switch</i> statement may fall into any
<i>switch-clauses</i> which are added later.
</p>

<p>
To ensure that such errors can be detected, the last statement in every <i>switch-clause</i> shall be a
<i>break</i> statement, or if the <i>switch-clause</i> is a compound statement, then the last statement in the
compound statement shall be a break statement.
</p>

<p>
Note: a <i>switch-clause</i> is defined as containing at least one statement. Two consecutive labels, <i>case</i> or
<i>default</i>, do not have any intervening statement and are therefore permitted by this rule.
</p>

<br>
<b>Example</b><pre style="margin-top:0;padding-top:0;">
switch ( x )
{
  case 0:
    break; /* Compliant - unconditional break */
  case 1: /* Compliant - empty fall through allows a group */
  case 2:
    break; /* Compliant */
  case 4:
    a = b; /* Non-compliant - break omitted */
  case 5:
    if ( a == b )
    {
      ++a;
      break; /* Non-compliant - conditional break */
    }
  default:
    ; /* Non-compliant - default must also have a break */
}
</pre>
END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->radio_vert("returnAllowed",OPT1,[OPT1RETURN,OPT1NORETURN],OPT1NORETURN);
}


# Subroutine designed to scan switch statements
sub checkAswitch {

  # Pull all needed data from the calling function
  my $check = shift;
  my $file = shift;
  my $ref = shift;
  my $lexeme = shift;
  my $canReturn = $check->option->lookup("returnAllowed") eq OPT1RETURN;
  
  # Push lexeme forward until our first case
  while ( $lexeme->text ne "{" ) {
    $lexeme = $lexeme->nextUseful
  }
  
  # Start counting curly braces, initialize our string for comparison and set start point
  my $count = 1;
  my $string = "";
  $lexeme = $lexeme->nextUseful;
  
  my $lineNumber = $lexeme->line_begin;
  my $columnNumber = $lexeme->column_begin;
  
  # While we are within our switch body
  while ( $count > 0 ) {

    unless ( $lexeme->inactive ) {

      # If we see either case or default, we know we have completed a case
      if ( $lexeme->text eq "case" || $lexeme->text eq "default" ) {

        # Test to make sure this was not an empty case
        my $empty = 0;
        $empty = 1 if $string !~ /;/ || $string eq "";


        if ( $canReturn ) {

          if ( $string =~ /\:\{/ ) {
            $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $empty || $string =~ /break;}$|throw[^;]*;}$|return[^;]*;}$|break;$|throw[^;]*;$|return[^;]*;$/;
          } else {
            $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $empty || $string =~ /break;$|throw[^;]*;$|return[^;]*;$/;
          }
          

        } else {

          if ( $string =~ /\:\{/ ) {
            $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $empty || $string =~ /break;}$|throw[^;]*;}$|break;$|throw[^;]*;$/;
          } else {
            $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $empty || $string =~ /break;$|throw[^;]*;$/;
          }

        } 

        #reset string
        $string = "";
        $lineNumber = $lexeme->line_begin;
        $columnNumber = $lexeme->column_begin;

      }

      if ( $lexeme->text eq "switch" ) {

        $lexeme = checkAswitch($check, $file, $ref, $lexeme)  and ! $lexeme->inactive;
        next;

      }
      
      $count++ if $lexeme->text eq "{";
      $count-- if $lexeme->text eq "}";
      $string .= $lexeme->text;

    }
    
    $lexeme = $lexeme->nextUseful if $lexeme->nextUseful;

  }

  if ( $canReturn ) {

    if ( $string =~ /\:\{/ ) {
      $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $string =~ /break;}}$|throw[^;]*;}}$|return[^;]*;}}$|break;}$|throw[^;]*;}$|return[^;]*;}$/;
    } else {
      $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $string =~ /break;}$|throw[^;]*;}$|return[^;]*;}$/;
    }

  } else {

    if ( $string =~ /\:\{/ ) {
      $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $string =~ /break;}}$|throw[^;]*;}}$|break;}$|throw[^;]*;}$/;
    } else {
      $check->violation($ref->ent,$file,$lineNumber,$columnNumber,ERR1,$ref->scope->name) unless $string =~ /break;}$|throw[^;]*;}$/;
    }

  }
  return $lexeme;
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file");
  
  # Pull a list of all functions that are defined within this file
  my @functionsDefined = $file->filerefs("Define", "Function");
  return unless @functionsDefined;
  
  # loop through all defined functions
  foreach my $function(@functionsDefined) {

    my $text = $function->ent->contents;
    # Remove any // style comments
    $text =~ s/\/\/.*?\n/\n/g;
    # Remove any /* */ style comments
    $text =~ s/\/\*.*?\*\//\n/gs;
    # Next unless we have a switch statement
    next unless $text =~ /\s+switch(\s+|\()/;

    # Get end point
    my $end = $function->ent->ref("End");

    # Spin up a lexer
    my $lexeme = $function->lexeme;
  
    #While I am still within the function
    while ( $lexeme and $lexeme->line_begin < $end->line ) {

      $lexeme = checkAswitch($check, $file, $function, $lexeme) if $lexeme->text eq "switch" and ! $lexeme->inactive;
      $lexeme = $lexeme->nextUseful;

    }
  }
}